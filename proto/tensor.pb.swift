/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: proto/tensor.proto
 *
 */

import Foundation
import SwiftProtobuf


struct header: ProtobufGeneratedMessage, ProtobufProto3Message {
  public var swiftClassName: String {return "header"}
  public var protoMessageName: String {return "header"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "type": 1,
    "rows": 2,
    "cols": 3,
    "stride": 4,
    "shape": 5,
    "dimIndex": 6,
    "offset": 7,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "type": 1,
    "rows": 2,
    "cols": 3,
    "stride": 4,
    "shape": 5,
    "dimIndex": 6,
    "offset": 7,
  ]}


  public var type: String = ""

  public var rows: Int64 = 0

  public var cols: Int64 = 0

  public var stride: [Int64] = []

  public var shape: [Int64] = []

  public var dimIndex: [Int64] = []

  public var offset: [Int64] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: ProtobufString.self, value: &type)
    case 2: try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &rows)
    case 3: try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &cols)
    case 4: try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &stride)
    case 5: try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &shape)
    case 6: try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &dimIndex)
    case 7: try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &offset)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if type != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    }
    if rows != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: rows, protoFieldNumber: 2, protoFieldName: "rows", jsonFieldName: "rows", swiftFieldName: "rows")
    }
    if cols != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: cols, protoFieldNumber: 3, protoFieldName: "cols", jsonFieldName: "cols", swiftFieldName: "cols")
    }
    if !stride.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: stride, protoFieldNumber: 4, protoFieldName: "stride", jsonFieldName: "stride", swiftFieldName: "stride")
    }
    if !shape.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: shape, protoFieldNumber: 5, protoFieldName: "shape", jsonFieldName: "shape", swiftFieldName: "shape")
    }
    if !dimIndex.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: dimIndex, protoFieldNumber: 6, protoFieldName: "dimIndex", jsonFieldName: "dimIndex", swiftFieldName: "dimIndex")
    }
    if !offset.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: offset, protoFieldNumber: 7, protoFieldName: "offset", jsonFieldName: "offset", swiftFieldName: "offset")
    }
  }

  public func _protoc_generated_isEqualTo(other: header) -> Bool {
    if type != other.type {return false}
    if rows != other.rows {return false}
    if cols != other.cols {return false}
    if stride != other.stride {return false}
    if shape != other.shape {return false}
    if dimIndex != other.dimIndex {return false}
    if offset != other.offset {return false}
    return true
  }
}

struct tensor: ProtobufGeneratedMessage, ProtobufProto3Message {
  public var swiftClassName: String {return "tensor"}
  public var protoMessageName: String {return "tensor"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "properties": 1,
    "storage": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "properties": 1,
    "storage": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = tensor
    var _properties: header? = nil
    var _storage: Data = Data()

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: header.self, value: &_properties)
      case 2: try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_storage)
      default: break
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _properties {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "properties", jsonFieldName: "properties", swiftFieldName: "properties")
      }
      if _storage != Data() {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _storage, protoFieldNumber: 2, protoFieldName: "storage", jsonFieldName: "storage", swiftFieldName: "storage")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _properties != other._properties {return false}
      if _storage != other._storage {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._properties = _properties
      clone._storage = _storage
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var properties: header {
    get {return _storage._properties ?? header()}
    set {_uniqueStorage()._properties = newValue}
  }
  public var hasProperties: Bool {
    return _storage._properties != nil
  }
  public mutating func clearProperties() {
    return _storage._properties = nil
  }

  public var storage: Data {
    get {return _storage._storage}
    set {_uniqueStorage()._storage = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: tensor) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
